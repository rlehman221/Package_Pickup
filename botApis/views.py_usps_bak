# -*- coding: utf-8 -*-
from __future__ import unicode_literals

# -*- USPS API Url -*-
USPS_api_url = 'http://production.shippingapis.com/ShippingAPI.dll?API=Verify&XML='

# from django.shortcuts import render
import urllib
from django.shortcuts import get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import FacebookUser
from .models import UserDetail
from .serializers import FbUsersSerializers
from django.http.response import HttpResponse
from django.core.exceptions import ObjectDoesNotExist
import time
import datetime
import requests
from bs4 import BeautifulSoup


# Save new Facebook users unique id
# url --> http://34.212.2.126:8000/api/fbusers/{{messenger user id}}/
class FacebookUserAPi(APIView):
    def get(self, request, userId, first_name, last_name):

        first_name = urllib.unquote_plus(first_name)
        last_name = urllib.unquote_plus(last_name)
        try:
            fuser = FacebookUser.objects.get(fb_unique_id=userId)
            return HttpResponse('')

        except ObjectDoesNotExist:
            ts = time.time()
            st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
            SaveFacebookUsers = FacebookUser(fb_unique_id=userId, first_name=first_name, last_name=last_name,
                                             created_date_time=st)
            SaveFacebookUsers.save()
            fuser = FacebookUser.objects.get(fb_unique_id=userId)
            # serializer = FbUsersSerializers(fuser, many=True)

            return HttpResponse('')


# Get user details and save it
class UserDetailsAPi(APIView):
    def get(self, request, userId, to_first_name, to_last_name, to_mi, to_email_address, to_phone_number, to_ext,
            to_company_name, to_street_address, to_app_suite_other, to_city, to_state, to_zipCode):

        userId = urllib.unquote_plus(userId)
        to_first_name = urllib.unquote_plus(to_first_name)
        to_last_name = urllib.unquote_plus(to_last_name)
        to_mi = urllib.unquote_plus(to_mi)
        to_email_address = urllib.unquote_plus(to_email_address)
        to_phone_number = urllib.unquote_plus(to_phone_number)
        to_ext = urllib.unquote_plus(to_ext)
        to_company_name = urllib.unquote_plus(to_company_name)
        to_street_address = urllib.unquote_plus(to_street_address)
        to_app_suite_other = urllib.unquote_plus(to_app_suite_other)
        to_city = urllib.unquote_plus(to_city)
        to_state = urllib.unquote_plus(to_state)
        to_zipCode = urllib.unquote_plus(to_zipCode)

        check_first = UserDetail.objects.get(fb_unique_id=userId)
        if_first = check_first.is_first
        if if_first == 0:
            pass
        else:
            delete_user_id = UserDetail.objects.get(fb_unique_id=userId)
            delete_user_id.delete()

        try:
            fuser = UserDetail.objects.get(fb_unique_id=userId)
            return HttpResponse('{"messages": [ {"text": "TEST MODE -> user data already exists in the database!"}]}')

        except ObjectDoesNotExist:
            saveAddressData = UserDetail(fb_unique_id=userId, first_name=to_first_name,
                                         last_name=to_last_name, MI=to_mi, email_address=to_email_address,
                                         phone_number=to_phone_number,
                                         ext=to_ext, company_name=to_company_name, street_address=to_street_address,
                                         apt_suite_other=to_app_suite_other, city=to_city, state=to_state,
                                         zip=to_zipCode,
                                         is_business=1)

        saveAddressData.save()
        return HttpResponse('{"messages": [ {"text": " "}]}')


# Check if User have previous data
class CheckPrevDataAPi(APIView):
    def get(self, request, userId):

        try:
            fuser = UserDetail.objects.get(fb_unique_id=userId)
            # return HttpResponse(str(fuser))
            UserDetail.objects.filter(fb_unique_id=userId).update(is_first=1)

            return HttpResponse(
                '{ "messages": [ { "text":  "{{ first name }} do you want to use your previous pickup information?", "quick_replies": [ { "title":"Yes", "block_names":["mail_main"] } , { "title":"No", "block_names":["PickupBusinessAddress"] } ] } ] }')

        except ObjectDoesNotExist:

            return HttpResponse('')


# Delete Previous info from the UserDetail TABLE
class DeleteUserInfo(APIView):
    def get(self, request, userId):
        delete_user_id = UserDetail.objects.get(fb_unique_id=userId)
        delete_user_id.delete()
        # data = UserDetail.objects.get(fb_unique_id=userId)
        return HttpResponse('')


# Make Loading Spinner
class Loader(APIView):
    @staticmethod
    def get(request):
        return HttpResponse(
            '{ "messages": [  { "attachment": { "type": "image", "payload": { "url": "https://mir-s3-cdn-cf.behance.net/project_modules/disp/1f430a36197347.57135ca19bbf5.gif"} } } ] }')


# Check Address Availability
class CheckAddressAV(APIView):
    def get(self, request, userId, to_first_name, to_last_name, to_mi, to_email_address, to_phone_number, to_ext,
            to_company_name, to_street_address, to_app_suite_other, to_city, to_state, to_zipCode):

        userId = urllib.unquote_plus(userId)
        to_first_name = urllib.unquote_plus(to_first_name)
        to_last_name = urllib.unquote_plus(to_last_name)
        to_mi = urllib.unquote_plus(to_mi)
        to_email_address = urllib.unquote_plus(to_email_address)
        to_phone_number = urllib.unquote_plus(to_phone_number)
        to_ext = urllib.unquote_plus(to_ext)
        to_company_name = urllib.unquote_plus(to_company_name)
        to_street_address = urllib.unquote_plus(to_street_address)
        to_app_suite_other = urllib.unquote_plus(to_app_suite_other)
        to_city = urllib.unquote_plus(to_city)
        to_state = urllib.unquote_plus(to_state)
        to_zipCode = urllib.unquote_plus(to_zipCode)

        rtr = ''
        # @todo make address verification code here

        if rtr == 'error':
            return HttpResponse(
                '{"messages": [ {"text": "you can try again but the information you have entered isnâ€™t available for the address you have entered"}]}')
        else:
            return HttpResponse('{ "set_attributes": { "addressFound": "found", "step": "2" } }')


# save Shipping and mail
class ShippingMailAPi(APIView):
    def get(self, request, tt, zz):
        return HttpResponse(tt + '' + zz)


# EasyPost APi Classes ***********************************************************
class USPSAPI:
    def __init__(self):
        pass

    @staticmethod
    def verify_and_create_address(first_name, last_name, street_address, city, state, zipcode, country, phone):
        pass

    def create_pickup(address):
        pass

    def create_shipment(self):
        pass

    @staticmethod
    def create_parcel():
        pass


# TEST CLASSES *******************************************************************
USPS_SECURE_CONNECTION = 'https://secure.shippingapis.com/ShippingAPI.dll'
USPS_CONNECTION = 'http://production.shippingapis.com/ShippingAPI.dll'
USPS_CONNECTION_TEST_SECURE = 'https://secure.shippingapis.com/ShippingAPITest.dll'
USPS_CONNECTION_TEST = 'http://testing.shippingapis.com/ShippingAPITest.dll'
USPS_STG = 'http://stg-production.shippingapis.com/ShippingAPI.dll'
USPS_STG_SECURE = 'https://stg-secure.shippingapis.com/ShippingAPI.dll'


class TestUsps(APIView):
    def get(self, request):
        soup = BeautifulSoup(requests.post(
            USPS_STG_SECURE + '?API=CarrierPickupSchedule&XML=<CarrierPickupAvailabilityRequest UserID="475PACKA6854"><FirmName>ABC Corp.</FirmName><SuiteOrApt>Suite 777</SuiteOrApt><Address2>1390 Market Street</Address2><Urbanization></Urbanization><City>Houston</City><State>TX</State><ZIP5>77058</ZIP5><ZIP4>1234</ZIP4></CarrierPickupAvailabilityRequest>').content,
                             "html.parser")

        # key = soup.find('zip4')
        # error = soup.find('error')
        #
        return HttpResponse(soup)

    pass
